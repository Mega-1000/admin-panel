<?php

namespace App\Http\Requests\Api\Transactions;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\ValidationException;

class StoreTransaction extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'postedInSystemDate' => 'required|date',
            'postedInBankDate' => 'required|date',
            'paymentId' => 'nullable',
            'operationKind' => 'required',
            'customerId' => 'required:customer:id',
            'orderId' => 'required:order:id',
            'operator' => 'required|string',
            'operation_value' => 'required|digits',
            'accounting_notes' => 'nullable|string',
            'transaction_notes' => 'nullable|string',
        ];
    }

    public function messages()
    {
        return [
            'postedInSystemDate.required' => 'test',
            'postedInBankDate.required' => 'required|date',
            'operationKind.required' => 'Pole rodzaj operacji jest wymagane.',
            'customerId.required' => 'Pole identyfikator klienta jest wymagane',
            'orderId.required' => 'Pole identyfikator zamówienia jest wymagane',
            'operator.required' => 'Pole operator jest wymagane.',
            'operation_value.required' => 'Pole wartość operacji jest wymagane',
//            'accounting_notes.required' => 'nullable|string',
//            'transaction_notes.required' => 'nullable|string',
        ];
    }

//    public function validated()
//    {
//        return parent::validated(); // TODO: Change the autogenerated stub
//    }

    public function expectsJson()
    {
        return true;
    }
}